package com.example.wfc_data.database.channles.repositories

import com.example.wfc_data.database.WFCDatabase
import com.example.wfc_data.database.caching.IMemoryCache
import com.example.wfc_data.database.channles.ChannelEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.withContext
import javax.inject.Inject

class ChannelsRepository @Inject constructor(
    database: WFCDatabase,
    private val _cache: IMemoryCache
) : IChannelsRepository {
    private val _channelsDao = database.channelDao()
    private val _cacheKey = "all_channel_entities_by_frequency"

    override suspend fun getAllByFrequencyAsync(): Map<Int, ChannelEntity> = coroutineScope {
        val cachedChannels = _cache.get<Map<Int, ChannelEntity>>(_cacheKey)
        if (cachedChannels != null) {
            return@coroutineScope cachedChannels
        }

        withContext(Dispatchers.IO) {
            val channels = _channelsDao
                .getAll()
                .associateBy { it.frequency }

            _cache.addOrUpdate(channels, _cacheKey)

            return@withContext channels
        }
    }

    override suspend fun addAsync(vararg channels: ChannelEntity) {
        withContext(Dispatchers.IO) {
            _channelsDao.insert(*channels)
            _cache.addOrUpdate(channels, _cacheKey)
        }
    }

    override suspend fun anyAsync(): Boolean = coroutineScope {
        withContext(Dispatchers.IO) {
            return@withContext _channelsDao.any()
        }
    }
}