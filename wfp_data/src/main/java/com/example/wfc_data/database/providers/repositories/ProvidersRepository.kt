package com.example.wfc_data.database.providers.repositories

import com.example.wfc_data.database.WFCDatabase
import com.example.wfc_data.database.caching.IMemoryCache
import com.example.wfc_data.database.providers.ProviderEntity
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.withContext
import javax.inject.Inject

class ProvidersRepository @Inject constructor(
    database: WFCDatabase,
    private val _memoryCache: IMemoryCache
) : IProvidersRepository {
    private val _providersDao = database.providerDao()
    private val _unknownProvider = ProviderEntity("unknown", "unknown")

    override suspend fun getAsync(id: String): ProviderEntity? = coroutineScope {
        val key = getMemoryCacheKey(id)
        val cachedProvider = _memoryCache.get<ProviderEntity>(key)

        if (cachedProvider != null) {
            if (cachedProvider == _unknownProvider) {
                return@coroutineScope null
            }
            return@coroutineScope cachedProvider
        }

        withContext(Dispatchers.IO) {
            val provider = _providersDao.getById(id)
            _memoryCache.addOrUpdate(provider ?: _unknownProvider, key)

            return@withContext provider
        }
    }

    override suspend fun anyAsync(): Boolean = coroutineScope {
        withContext(Dispatchers.IO) {
            return@withContext _providersDao.any()
        }
    }

    override suspend fun addAsync(vararg providers: ProviderEntity): Unit = coroutineScope {
        withContext(Dispatchers.IO) {
            _providersDao.insert(*providers)
        }
    }

    override suspend fun removeAllAsync() = coroutineScope {
        withContext(Dispatchers.IO) {
            _providersDao.removeAll()
        }

        _memoryCache.removeByType(ProviderEntity::class.java)
    }

    private fun getMemoryCacheKey(id: String): String {
        return "provider_entity_${id}"
    }
}