package com.example.wifi_pentester.data

import android.os.Parcel
import android.os.Parcelable
import androidx.databinding.BaseObservable
import androidx.databinding.Bindable
import androidx.databinding.ObservableBoolean
import java.io.Serializable

class WifiSettings : BaseObservable, Serializable, Parcelable {
    protected constructor(`in`: Parcel) {
        wep = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        wpa = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        wpa2 = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        wpa3 = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        wps = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        open = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        frequency24Ghz = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        frequency5Ghz = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        wifiLevel = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        name = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        wifiChannel = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
        wifiProviderName = `in`.readParcelable(ObservableBoolean::class.java.classLoader)
    }

    override fun describeContents(): Int {
        return 0
    }

    override fun writeToParcel(parcel: Parcel, i: Int) {
        parcel.writeParcelable(wep, i)
        parcel.writeParcelable(wpa, i)
        parcel.writeParcelable(wpa2, i)
        parcel.writeParcelable(wpa3, i)
        parcel.writeParcelable(wps, i)
        parcel.writeParcelable(open, i)
        parcel.writeParcelable(frequency24Ghz, i)
        parcel.writeParcelable(frequency5Ghz, i)
        parcel.writeParcelable(wifiLevel, i)
        parcel.writeParcelable(name, i)
        parcel.writeParcelable(wifiChannel, i)
        parcel.writeParcelable(wifiProviderName, i)
    }

    enum class WifiSortMode {
        WifiLevel, Name, WifiChannel, WifiProviderName
    }

    @kotlin.jvm.JvmField
    @Bindable
    val wep: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val wpa: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val wpa2: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val wpa3: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val wps: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val open: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val frequency24Ghz: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val frequency5Ghz: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val wifiLevel: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val name: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val wifiChannel: ObservableBoolean?

    @kotlin.jvm.JvmField
    @Bindable
    val wifiProviderName: ObservableBoolean?

    constructor() {
        wpa = ObservableBoolean(true)
        wep = ObservableBoolean(true)
        wpa2 = ObservableBoolean(true)
        wpa3 = ObservableBoolean(true)
        wps = ObservableBoolean(true)
        open = ObservableBoolean(true)
        frequency24Ghz = ObservableBoolean(true)
        frequency5Ghz = ObservableBoolean(true)
        wifiLevel = ObservableBoolean(true)
        name = ObservableBoolean(false)
        wifiChannel = ObservableBoolean(false)
        wifiProviderName = ObservableBoolean(false)
    }

    fun reset() {
        wpa!!.set(true)
        wep!!.set(true)
        wpa2!!.set(true)
        wpa3!!.set(true)
        wps!!.set(true)
        open!!.set(true)
        frequency24Ghz!!.set(true)
        frequency5Ghz!!.set(true)
        wifiLevel!!.set(true)
        name!!.set(false)
        wifiChannel!!.set(false)
        wifiProviderName!!.set(false)
    }

    val filterModes: String
        get() {
            var filterModes = ""
            if (wep!!.get()) filterModes += "wep"
            if (wpa!!.get()) filterModes += "wpa"
            if (wpa2!!.get()) filterModes += "wpa2"
            if (wpa3!!.get()) filterModes += "wpa3"
            if (wps!!.get()) filterModes += "wps"
            if (open!!.get()) filterModes += "open"
            if (frequency24Ghz!!.get()) filterModes += "2Ghz"
            if (frequency5Ghz!!.get()) filterModes += "5Ghz"
            return filterModes
        }
    val sortMode: WifiSortMode
        get() = if (wifiLevel!!.get()) WifiSortMode.WifiLevel else if (wifiChannel!!.get()) WifiSortMode.WifiChannel else if (name!!.get()) WifiSortMode.Name else WifiSortMode.WifiProviderName

    companion object {
        @JvmField
        val CREATOR: Parcelable.Creator<WifiSettings?> = object : Parcelable.Creator<WifiSettings?> {
            override fun createFromParcel(`in`: Parcel): WifiSettings? {
                return WifiSettings(`in`)
            }

            override fun newArray(size: Int): Array<WifiSettings?> {
                return arrayOfNulls(size)
            }
        }
        val nameOfTheFileToSave: String
            get() = "wifiSettings.bin"
    }
}