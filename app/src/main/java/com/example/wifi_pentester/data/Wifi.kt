package com.example.wifi_pentester.data

import android.os.Parcel
import android.os.Parcelable
import java.util.*

class Wifi : Parcelable {
    protected constructor(`in`: Parcel) {
        isHaveWPS = `in`.readByte().toInt() != 0
        wifiLevel = `in`.readInt()
        mac = `in`.readString()!!
        isConnected = `in`.readByte().toInt() != 0
        name = `in`.readString()!!
        wifiProviderName = `in`.readString()!!
        frequency = `in`.readInt()
        wifiChannel = `in`.readInt()
        fullInfo = `in`.readString()
    }

    override fun describeContents(): Int {
        return 0
    }

    override fun writeToParcel(parcel: Parcel, i: Int) {
        parcel.writeByte((if (isHaveWPS) 1 else 0).toByte())
        parcel.writeInt(wifiLevel)
        parcel.writeString(mac)
        parcel.writeByte((if (isConnected) 1 else 0).toByte())
        parcel.writeString(name)
        parcel.writeString(wifiProviderName)
        parcel.writeInt(frequency)
        parcel.writeInt(wifiChannel)
        parcel.writeString(fullInfo)
    }

    enum class EncryptionType {
        WPA, WPA2, WEP;

        companion object {
            fun getListOfEncryptionTypes(vararg types: EncryptionType): ArrayList<EncryptionType> {
                val typeList = ArrayList<EncryptionType>()
                for (type in types) {
                    typeList.add(type)
                }
                return typeList
            }

            fun getListOfEncryptionTypes(wifiCapabilities: String): ArrayList<EncryptionType> {
                val typeList = ArrayList<EncryptionType>()

                //Required in order
                if (wifiCapabilities.contains("WPA2")) typeList.add(WPA2)
                if (wifiCapabilities.contains("WPA")) typeList.add(WPA)
                if (wifiCapabilities.contains("WEP")) typeList.add(WEP)
                return typeList
            }
        }
    }

    var isHaveWPS: Boolean
    var encryptionTypeList = listOf<EncryptionType>()
    var wifiLevel: Int
    var mac: String
    var isConnected: Boolean
    var name: String
    var wifiProviderName: String
    var frequency: Int
    var wifiChannel: Int
    var fullInfo: String?

    constructor(haveWPS: Boolean,
                encryptionTypeList: List<EncryptionType>,
                wifiLevel: Int, mac: String,
                isConnected: Boolean,
                name: String,
                wifiChannel: Int,
                fullInfo: String?,
                wifiProviderName: String,
                frequency: Int) {
        isHaveWPS = haveWPS
        this.encryptionTypeList = encryptionTypeList
        this.wifiLevel = wifiLevel
        this.mac = mac
        this.isConnected = isConnected
        this.name = name
        this.wifiChannel = wifiChannel
        this.fullInfo = fullInfo
        this.wifiProviderName = wifiProviderName
                ?: "Unknown"
        this.frequency = frequency
    }

    val distance: Double
        get() {
            val exp = (27.55 - 20 * Math.log10(frequency.toDouble()) + Math.abs(wifiLevel)) / 20.0
            return Math.pow(10.0, exp)
        }

    companion object {
        @JvmField
        val CREATOR: Parcelable.Creator<Wifi?> = object : Parcelable.Creator<Wifi?> {
            override fun createFromParcel(`in`: Parcel): Wifi? {
                return Wifi(`in`)
            }

            override fun newArray(size: Int): Array<Wifi?> {
                return arrayOfNulls(size)
            }
        }
    }
}