package com.example.wifi_pentester.data

import android.Manifest
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.net.wifi.WifiManager
import android.os.Build
import android.provider.Settings
import android.provider.Settings.SettingNotFoundException
import android.text.TextUtils
import androidx.core.app.ActivityCompat
import com.example.wifi_pentester.data.Wifi.EncryptionType
import java.util.*
import java.util.regex.Pattern
import kotlin.text.split as split

enum class ScanMode {
    Enabled, Disabled
}

class WifiScanner private constructor(private val context: Context) {


    private val REQUIRED_GEODATA_SDK = 21
    private var observationStarted = false
    var wifiScanMode: ScanMode
        private set
    val changeObserver: WifiChangeObserver
    var wifiList = ArrayList<Wifi>()
        private set
    private val wifiManager: WifiManager
    private var timer: Timer? = null
    private val wifiProviderMap: HashMap<String, String>
    val channelMap: HashMap<Int, Int>
    var wifiCheckPeriodSec = 4.0

    private fun getWifiProviderMapFromAssetTxt(fileName: String): HashMap<String, String> {
        val newWifiProviderMap = HashMap<String, String>()

        context.assets.open(fileName).use {
            it.bufferedReader().forEachLine { line ->
                if(line.isEmpty()) return@forEachLine

                val macAndProvider = line.split(" ", limit = 2)

                if(macAndProvider.count() < 2) return@forEachLine

                val mac = macAndProvider[0]
                val provider = macAndProvider[1]

                newWifiProviderMap[mac] = provider
            }
        }
        return newWifiProviderMap
    }

    fun startWifiObservation() {
        wifiScanMode = ScanMode.Enabled
        if (!observationStarted) {
            timer = Timer()
            wifiManager.startScan()
            timer!!.scheduleAtFixedRate(object : TimerTask() {
                override fun run() {
                    val wifiScanResults = wifiManager.scanResults
                    val connectionInfo = wifiManager.connectionInfo
                    wifiList = ArrayList()
                    val p = Pattern.compile("^([a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2})(.*)")
                    for (res in wifiScanResults) {
                        val m = p.matcher(res.BSSID)
                        m.matches()

                        val group = m.group(1) ?: String()
                        val wifiProvider = wifiProviderMap[group] ?: String()


                        wifiList.add(Wifi(
                                res.capabilities.contains("WPS"),
                                EncryptionType.Companion.getListOfEncryptionTypes(res.capabilities),
                                res.level,
                                res.BSSID, res.BSSID == connectionInfo.bssid,
                                res.SSID,
                                channelMap[res.frequency]!!,
                                res.capabilities,
                                wifiProvider,
                                res.frequency
                        ))
                    }
                    changeObserver.notifyObservers(wifiList)
                    wifiManager.startScan()
                }
            }, 0, wifiCheckPeriodSec.toLong() * 1000)
            observationStarted = true
        }
    }

    fun stopWifiObservation() {
        wifiScanMode = ScanMode.Disabled
        timer!!.cancel()
        observationStarted = false
    }

    val isWifiEnabled: Boolean
        get() = wifiManager.isWifiEnabled

    fun enableWifi() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            val intent = Intent(Settings.Panel.ACTION_WIFI)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
            context.startActivity(intent)
            return
        }
        wifiManager.isWifiEnabled = true
    }

    val isLocationRequired: Boolean
        get() = Build.VERSION.SDK_INT >= REQUIRED_GEODATA_SDK

    val isLocationEnabled: Boolean
        get() {
            var locationMode = 0
            val locationProviders: String
            return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                locationMode = try {
                    Settings.Secure.getInt(context.contentResolver, Settings.Secure.LOCATION_MODE)
                } catch (e: SettingNotFoundException) {
                    e.printStackTrace()
                    return false
                }
                locationMode != Settings.Secure.LOCATION_MODE_OFF
            } else {
                locationProviders = Settings.Secure.getString(context.contentResolver, Settings.Secure.LOCATION_PROVIDERS_ALLOWED)
                !TextUtils.isEmpty(locationProviders)
            }
        }

    fun is5gzAvailable(): Boolean {
        return wifiManager.is5GHzBandSupported
    }

    fun requestEnableLocation() {
        val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
        context.startActivity(intent)
    }

    val isWifiHavePermissions: Boolean
        get() = !(ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED
                && ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)

    companion object {
        var instance: WifiScanner? = null
        fun getInstance(context: Context): WifiScanner {
            if (instance == null) {
                instance = WifiScanner(context)
            }
            return instance as WifiScanner
        }
    }

    init {
        wifiProviderMap = getWifiProviderMapFromAssetTxt("mac.txt")
        channelMap = HashMap<Int, Int>()
        for ((key, value) in getWifiProviderMapFromAssetTxt("channels.txt").toSortedMap()) {
            channelMap[key!!.toInt()] = value!!.toInt()
        }

 /*       for ((key, value) in getWifiProviderMapFromAssetTxt("channels.txt").toSortedMap()) {
            var
            channelMap[key!!.toInt()] = value!!.toInt()
        }
        */
        changeObserver = WifiChangeObserver()
        wifiScanMode = ScanMode.Disabled
        wifiManager = context.applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
    }
}