package com.example.wifi_pentester.utils.handlers

import android.content.Context
import android.widget.Toast
import com.example.wfc_data.database.WFCDatabase
import com.example.wfc_data.database.entities.LogEntity
import com.example.wfc_data.database.entities.enums.LogType
import com.example.wfc_models.exceptions.BusinessException
import com.example.wfc_models.exceptions.ViewMessageBusinessException
import com.example.wfc_models.shell.root_logic.Shell
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.*
import java.util.*
import kotlin.system.exitProcess
import javax.inject.Inject

class ExceptionHandler @Inject constructor(@ApplicationContext private val _context:  Context,
                                           private val _database: WFCDatabase) {
    private var _lastException: Throwable? = null

    private val _notCriticalExceptionsTypes = mutableListOf<Class<*>>(
        BusinessException::class.java,
        ViewMessageBusinessException::class.java,
        Shell.NotFoundException::class.java
    )

    fun register() {
        val baseErrorHandler = Thread.getDefaultUncaughtExceptionHandler()
        Thread.setDefaultUncaughtExceptionHandler { thread, exception ->
            if (_lastException == exception) return@setDefaultUncaughtExceptionHandler
            _lastException = exception

            if (exception is ViewMessageBusinessException) {
                Toast.makeText(_context, exception.message, Toast.LENGTH_LONG).show()
            }
            CoroutineScope(Dispatchers.IO).launch {
                if(exception !is CancellationException){
                    saveErrorLog(exception.message ?: "")
                }

                val isNotCriticalException =
                    _notCriticalExceptionsTypes.contains(exception::class.java)

                return@launch

          /* *//*     if (isNotCriticalException) return@launch*//*

                baseErrorHandler?.uncaughtException(thread, exception) ?: exitProcess(1)*/
            }
        }
    }

    private suspend fun saveErrorLog(errorMessage: String) = coroutineScope {
        val errorLog = LogEntity(Date(), errorMessage, LogType.EXCEPTION)

        _database.logDao().insert(errorLog)
    }
}