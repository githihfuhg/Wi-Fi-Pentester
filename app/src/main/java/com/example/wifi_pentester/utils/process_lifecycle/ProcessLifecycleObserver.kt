package com.example.wifi_pentester.utils.process_lifecycle

import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleOwner
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class ProcessLifecycleObserver @Inject constructor() : DefaultLifecycleObserver {
    private val _liveCycleEvent = MutableStateFlow<Lifecycle.Event?>(null)
    val liveCycleEvent: StateFlow<Lifecycle.Event?> = _liveCycleEvent

    override fun onCreate(owner: LifecycleOwner) {
        _liveCycleEvent.value = Lifecycle.Event.ON_CREATE
    }

    override fun onStart(owner: LifecycleOwner) {
        _liveCycleEvent.value = Lifecycle.Event.ON_START
    }

    override fun onResume(owner: LifecycleOwner) {
        _liveCycleEvent.value = Lifecycle.Event.ON_RESUME
    }

    override fun onPause(owner: LifecycleOwner) {
        _liveCycleEvent.value = Lifecycle.Event.ON_PAUSE
    }

    override fun onStop(owner: LifecycleOwner) {
        _liveCycleEvent.value = Lifecycle.Event.ON_STOP
    }

    override fun onDestroy(owner: LifecycleOwner) {
        _liveCycleEvent.value = Lifecycle.Event.ON_DESTROY
    }
}