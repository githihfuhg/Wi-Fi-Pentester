package com.example.wifi_pentester.utils.databinding

import android.animation.ValueAnimator
import android.view.View
import android.view.View.OnLongClickListener
import android.widget.ProgressBar
import androidx.appcompat.widget.SearchView
import androidx.databinding.BindingAdapter
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.SimpleItemAnimator
import com.example.wifi_pentester.utils.listeners.OnTextChangedListener


@BindingAdapter("animatedProgressBarChange")
fun setAnimatedProgressBarValue(target: ProgressBar, newValue: Int) {
    val progressBarAnimator = ValueAnimator.ofInt(target.progress, newValue)
    progressBarAnimator.duration = 500
    progressBarAnimator.addUpdateListener { valueAnimator -> target.progress = (valueAnimator.animatedValue as Int) }
    progressBarAnimator.setIntValues(target.progress, newValue)
    progressBarAnimator.start()
}

@BindingAdapter("android:onLongClick")
fun onLongClick(view: View, i: OnLongClickListener?) {
    view.setOnLongClickListener(i)
}

@BindingAdapter("app:onSearchViewChangeTextListener")
fun onSearchViewChangeTextListener(searchView: SearchView, listener: OnTextChangedListener?) {
    val listener = object:
        SearchView.OnQueryTextListener {
        override fun onQueryTextSubmit(text: String?): Boolean {
            return true
        }
        override fun onQueryTextChange(text: String?): Boolean {
            listener?.onTextChanged(text)

            return true
        }
    }
    searchView.setOnQueryTextListener(listener)
}

@BindingAdapter("goneIf")
fun bindGoneIf(view: View, hide: Boolean) {
    view.visibility = when (hide) {
        true -> View.GONE
        false -> View.VISIBLE
    }
}

@BindingAdapter("invisibleIf")
fun bindInvisibleIf(view: View, hide: Boolean) {
    view.visibility = when (hide) {
        true -> View.INVISIBLE
        false -> View.VISIBLE
    }
}

@BindingAdapter("adapter")
fun bindRecyclerViewAdapter(recyclerView: RecyclerView, adapter: RecyclerView.Adapter<out RecyclerView.ViewHolder>) {
    recyclerView.adapter = adapter
    recyclerView.setHasFixedSize(true)
    val itemAnimator = recyclerView.itemAnimator as SimpleItemAnimator?
    if (itemAnimator != null) {
        itemAnimator.supportsChangeAnimations = false
    }
}

