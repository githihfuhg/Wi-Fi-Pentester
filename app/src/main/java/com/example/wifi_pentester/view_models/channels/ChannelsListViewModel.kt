package com.example.wifi_pentester.view_models.channels

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.wfc_data.database.WFCDatabase
import com.example.wfc_data.database.entities.ChannelEntity
import com.example.wfc_models.channels.data_models.WifiChannel
import com.example.wfc_models.settings.ISettingsService
import com.example.wfc_models.settings.data_models.WifiFilter
import com.example.wfc_models.settings.data_models.WifiScannerSettings
import com.example.wfc_models.wifi.converters.WifiConverter
import com.example.wfc_models.wifi.scanners.IWifiScanService
import com.example.wfc_models.wifi.scanners.data_models.FrequencyType
import com.example.wfc_models.wifi.scanners.data_models.Wifi
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class ChannelsListViewModel @Inject constructor(
    application: Application,
    private val _database: WFCDatabase,
    private val _wifiScanService: IWifiScanService,
    private val _settingService: ISettingsService,
) : AndroidViewModel(application) {
    private val channelsByFrequencyType = mutableMapOf<FrequencyType, List<ChannelEntity>>()

    val is5GzMode = MutableStateFlow(false)

    val channels = _wifiScanService.wifiList.map { wifis ->
        val wifisByChannels = wifis
            .groupBy { it.channel }
            .toMap()

        val channels =
            if (is5GzMode.value) channelsByFrequencyType[FrequencyType.F5]
            else channelsByFrequencyType[FrequencyType.F24]

        val result = channels!!.map { channel ->
            val wifi = wifisByChannels[channel.value]
            val wifiCount = wifi?.size ?: 0

            return@map WifiChannel(channel.value, wifiCount)
        }

        return@map result
    }

    init {
        viewModelScope.launch {
            val allChannels = _database
                .channelDao()
                .getAll()
                .groupBy { WifiConverter.convertFrequencyToFrequencyType(it.frequency) }
                .toMap()

            channelsByFrequencyType.putAll(allChannels)
        }
    }

    fun startScan() {
        viewModelScope.launch {
            val frequencyFilters = setOf(
                WifiFilter(Wifi::frequencyType.name, FrequencyType.F24.toString()),
                WifiFilter(Wifi::frequencyType.name, FrequencyType.F5.toString()),
                WifiFilter(Wifi::frequencyType.name, FrequencyType.F6.toString())
            )

            val wifiScannerSettings = _settingService.getSettings(WifiScannerSettings::class.java)!!

            wifiScannerSettings.filters = wifiScannerSettings.filters
                .filter { !frequencyFilters.contains(it) }

            _wifiScanService.startScan(wifiScannerSettings)
        }
    }

    fun stopScan() {
        viewModelScope.launch {
            _wifiScanService.stopScan()
        }
    }
}