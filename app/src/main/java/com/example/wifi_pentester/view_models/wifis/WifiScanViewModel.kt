package com.example.wifi_pentester.view_models.wifis

import android.app.Application
import android.net.wifi.WifiManager
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.wfc_models.wifi.scanners.contracts.IWifiScanService
import com.example.wfc_models.wifi.scanners.dtos.Wifi
import com.example.wfc_models.wifi.scanners.dtos.WifiScannerState
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class WifiScanViewModel @Inject constructor(
    private val _application: Application,
    private val _wifiScanService: IWifiScanService,
    private val _wifiManager: WifiManager
) : AndroidViewModel(_application) {
    private val _wifiList = MutableStateFlow<List<Wifi>>(listOf())
    val wifiList = _wifiList as StateFlow<List<Wifi>>

    init {
        viewModelScope.launch {
            _wifiScanService.wifiList.collect { _wifiList.value = it }
        }
    }
/*

    val isLocationEnabled: Boolean
        get() {
            var locationMode = 0
            locationMode = try {
                Settings.Secure.getInt(
                    _application.applicationContext.contentResolver,
                    Settings.Secure.LOCATION_MODE
                )
            } catch (e: Settings.SettingNotFoundException) {
                return false
            }
            return locationMode != Settings.Secure.LOCATION_MODE_OFF
        }

    val isWifiAvailable: Boolean
        get() = isWifiEnabled && isLocationEnabled && hasWifiScanningPermissions



    val hasWifiScanningPermissions: Boolean
      get() {
          val context = _application.applicationContext

            val accessFineLocationPermissionKey = ActivityCompat
                .checkSelfPermission(context, ACCESS_FINE_LOCATION)

            val accessCoarseLocationPermissionKey = ActivityCompat
                .checkSelfPermission(context, ACCESS_COARSE_LOCATION)

            return accessFineLocationPermissionKey == PackageManager.PERMISSION_GRANTED ||
                    accessCoarseLocationPermissionKey == PackageManager.PERMISSION_GRANTED
        }

    fun showLocationRequest() {
        val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
        _application.applicationContext.startActivity(intent)
    }


*/

   /* fun enableWifi() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            val intent = Intent(Settings.Panel.ACTION_WIFI)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
            _application.applicationContext.startActivity(intent)
            return
        }
        _wifiManager.isWifiEnabled = true
    }*/

    val isWifiEnabled: Boolean
        get() = _wifiManager.isWifiEnabled

    val wifiScannerState: WifiScannerState
        get() = _wifiScanService.scannerState

    fun startScan() {
        viewModelScope.launch {
            _wifiScanService.startScan()
        }
    }

    fun stopScan() {
        viewModelScope.launch {
            _wifiScanService.stopScan()
        }
    }
}

