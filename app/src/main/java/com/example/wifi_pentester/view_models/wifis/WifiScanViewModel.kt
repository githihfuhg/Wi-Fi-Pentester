package com.example.wifi_pentester.view_models.wifis

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.wfc_models.wifi.scanners.IWifiScanService
import com.example.wfc_models.wifi.scanners.data_models.WifiScannerState
import com.example.wifi_pentester.data.WifiScanner
import kotlinx.coroutines.launch


abstract class WifiScanViewModel(
    application: Application,
    private val _wifiScanService: IWifiScanService
) : AndroidViewModel(application) {
    private var wifiScanner: WifiScanner = WifiScanner.getInstance(application)

    val isLocationEnabled: Boolean
        get() = wifiScanner.isLocationEnabled

    fun is5gzAvailable(): Boolean {
        return wifiScanner.is5gzAvailable()
    }

    val isWifiAvailable: Boolean
        get() = wifiScanner.isWifiEnabled && wifiScanner.isWifiHavePermissions && wifiScanner.isLocationEnabled

    val isWifiEnabled: Boolean
        get() = wifiScanner.isWifiEnabled

    val isWifiHavePermissions: Boolean
        get() = wifiScanner.isWifiHavePermissions

    fun showLocationRequest() {
        wifiScanner.requestEnableLocation()
    }

    fun enableWifi() {
        wifiScanner.enableWifi()
    }

    val isLocationRequired: Boolean
        get() = wifiScanner.isLocationRequired

    val wifiScannerState: WifiScannerState
        get() = _wifiScanService.scannerState

    fun startScan() {
        viewModelScope.launch {
            _wifiScanService.startScan()
        }
    }

    fun stopScan() {
        viewModelScope.launch {
            _wifiScanService.stopScan()
        }
    }
}