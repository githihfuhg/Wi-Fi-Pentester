package com.example.wifi_pentester.view_models.settings

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.wfc_models.settings.ISettingsService
import com.example.wfc_models.settings.dtos.AppSetting
import com.example.wfc_models.settings.dtos.WifiConnectorSetting
import com.example.wfc_models.settings.dtos.WifiScannerSetting
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class SettingsViewModel @Inject constructor(private val _settingService: ISettingsService) :
    ViewModel() {
    private val _appSettings = MutableStateFlow<AppSetting?>(null)
    private val _wifiScannerSetting = MutableStateFlow<WifiScannerSetting?>(null)
    private val _wifiConnectorSetting = MutableStateFlow<WifiConnectorSetting?>(null)

    val appSettings = _appSettings as StateFlow<AppSetting?>
    val wifiScannerSetting = _wifiScannerSetting as StateFlow<WifiScannerSetting?>
    val wifiConnectorSetting = _wifiConnectorSetting as StateFlow<WifiConnectorSetting?>

    init {
        viewModelScope.launch {
            _settingService
                .getSettingFlow(AppSetting::class.java)
                .collect {_appSettings.value = it}

            _settingService
                .getSettingFlow(WifiScannerSetting::class.java)
                .collect {_wifiScannerSetting.value = it}

            _settingService
                .getSettingFlow(WifiConnectorSetting::class.java)
                .collect {_wifiConnectorSetting.value = it}
        }
    }
}