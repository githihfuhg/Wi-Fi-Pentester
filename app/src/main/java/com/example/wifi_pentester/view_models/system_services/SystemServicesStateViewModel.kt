package com.example.wifi_pentester.view_models.system_services

import android.app.Application
import android.location.LocationManager
import android.net.wifi.WifiManager
import android.os.Build
import android.provider.Settings
import androidx.lifecycle.*
import com.example.wifi_pentester.utils.process_lifecycle.ProcessLifecycleObserver
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.delay
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.isActive
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class SystemServicesStateViewModel @Inject constructor(
    private val _application: Application,
    private val _wifiManager: WifiManager,
    private val _locationManager: LocationManager,
    private val _processLifecycleObserver: ProcessLifecycleObserver
) : AndroidViewModel(_application) {
    private val _isLocationEnabled = MutableStateFlow(isLocationEnabled())
    private val _isWifiEnabled = MutableStateFlow(isWifiEnabled())

    val isLocationEnabled: StateFlow<Boolean> = _isLocationEnabled
    val isWifiEnabled: StateFlow<Boolean> = _isWifiEnabled

    init {
        viewModelScope.launch {

            while (coroutineContext.isActive){
                synchronizeState()
                delay(3000)
            }
        }
    }

    private fun synchronizeState() {
        viewModelScope.launch {
            _isLocationEnabled.value = isLocationEnabled()
            _isWifiEnabled.value = isWifiEnabled()
        }
    }

    private fun isLocationEnabled(): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            _locationManager.isLocationEnabled
        } else {
            try {
                val mode = Settings.Secure.getInt(
                    _application.applicationContext.contentResolver,
                    Settings.Secure.LOCATION_MODE,
                    Settings.Secure.LOCATION_MODE_OFF
                )
                mode != Settings.Secure.LOCATION_MODE_OFF
            } catch (e: Settings.SettingNotFoundException) {
                false
            }
        }
    }

    private fun isWifiEnabled(): Boolean {
        return _wifiManager.isWifiEnabled
    }
}