package com.example.wifi_pentester.view_models.settings

import androidx.lifecycle.ViewModel
import com.example.wfc_models.settings.IInitSettingsService
import com.example.wfc_models.settings.ISettingsService
import com.example.wfc_models.settings.dtos.WifiFilter
import com.example.wfc_models.settings.dtos.WifiScannerSetting
import com.example.wfc_models.settings.dtos.WifiSortMode
import com.example.wfc_models.wifi.scanners.dtos.EncryptionType
import com.example.wfc_models.wifi.scanners.dtos.FrequencyType
import com.example.wfc_models.wifi.scanners.dtos.Wifi
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import javax.inject.Inject

@HiltViewModel
class WifiScannerSettingsViewModel @Inject constructor(
    private val _settingService: ISettingsService,
    private val _initSettingsService: IInitSettingsService
) : ViewModel() {
    private val _wifiSortModesByValue = WifiSortMode
        .values()
        .associateBy { it.value }

    private val _timeoutValuesByNames = listOf(1, 3, 5)
        .associateBy({ x -> getTimeoutNameByValue(x) }, { x -> x })

    val isOpenFilter = MutableStateFlow(false)
    val isWepFilter = MutableStateFlow(false)
    val isWpaFilter = MutableStateFlow(false)
    val isWpa2Filter = MutableStateFlow(false)
    val isWpa3Filter = MutableStateFlow(false)
    val isWpsFilter = MutableStateFlow(false)
    val isFrequency24Filter = MutableStateFlow(false)
    val isFrequency5Filter = MutableStateFlow(false)

    val wifiSortMode = MutableStateFlow("")
    val wifiScanTimeout = MutableStateFlow("")

    val wifiSortModeValues = _wifiSortModesByValue.keys.toTypedArray()
    val timeoutList = _timeoutValuesByNames.keys.toTypedArray()

    private val mutableStatePropertiesByWifiFilter = mapOf(
        WifiFilter(Wifi::encryptionType.name, EncryptionType.OPEN.toString()) to isOpenFilter,
        WifiFilter(Wifi::encryptionType.name, EncryptionType.WEP.toString()) to isWepFilter,
        WifiFilter(Wifi::encryptionType.name, EncryptionType.WPA.toString()) to isWpaFilter,
        WifiFilter(Wifi::encryptionType.name, EncryptionType.WPA2.toString()) to isWpa2Filter,
        WifiFilter(Wifi::encryptionType.name, EncryptionType.WPA3.toString()) to isWpa3Filter,
        WifiFilter(Wifi::hasWps.name, true.toString()) to isWpsFilter,
        WifiFilter(Wifi::frequencyType.name, FrequencyType.F24.toString()) to isFrequency24Filter,
        WifiFilter(Wifi::frequencyType.name, FrequencyType.F5.toString()) to isFrequency5Filter,
    )

    suspend fun synchronizeStateBySettings(wifiScannerSettings: WifiScannerSetting? = null) =
        coroutineScope {
            val settings = wifiScannerSettings
                ?: _settingService.getSetting(WifiScannerSetting::class.java)!!

            wifiSortMode.value = settings.sortMode.value
            wifiScanTimeout.value = getTimeoutNameByValue(settings.timeoutInSeconds)

            mutableStatePropertiesByWifiFilter.values
                .filter { it.value }
                .forEach { it.value = false }

            settings.filters.forEach { filter ->
                val filterMutableField = mutableStatePropertiesByWifiFilter[filter]!!
                filterMutableField.value = true
            }
        }

    suspend fun saveSettings() = coroutineScope {
        val wifiScannerSettings = _settingService
            .getSetting(WifiScannerSetting::class.java)!!

        val newFilters = mutableStatePropertiesByWifiFilter
            .filter { it.value.value }
            .map { it.key }

        wifiScannerSettings.filters = newFilters
        wifiScannerSettings.sortMode = _wifiSortModesByValue[wifiSortMode.value]!!
        wifiScannerSettings.timeoutInSeconds = _timeoutValuesByNames[wifiScanTimeout.value]!!

        _settingService.updateSettings(wifiScannerSettings)
    }

    suspend fun resetSettings() = coroutineScope {
        val defaultSettings =
            _initSettingsService.initDefaultWifiScannerSettings(updateIfExist = true)
        synchronizeStateBySettings(defaultSettings)
    }

    private fun getTimeoutNameByValue(timeout: Int): String {
        return "$timeout sec"
    }
}