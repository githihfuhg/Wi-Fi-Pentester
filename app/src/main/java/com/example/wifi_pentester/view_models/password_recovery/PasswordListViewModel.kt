package com.example.wifi_pentester.view_models.password_recovery

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.wfc_models.exceptions.ViewMessageBusinessException
import com.example.wfc_models.recovered_wifis.IRecoveredWifiService
import com.example.wfc_models.recovered_wifis.data_models.RecoveredWifi
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import javax.inject.Inject

@HiltViewModel
class PasswordListViewModel @Inject constructor(
    application: Application,
    private val _recoveredWifiModel: IRecoveredWifiService
) : AndroidViewModel(application) {
    private val _recoveredWiFis = MutableStateFlow(listOf<RecoveredWifi>())
    private var _allRecoveredWiFis = listOf<RecoveredWifi>()
    private val _isProcess = MutableStateFlow(false)
    private val _isPasswordReadingError = MutableStateFlow(false)
    private val _isWifiNotFound = MutableStateFlow(false)

    init {
        viewModelScope.launch {
            initRecoveredWiFis()
        }
    }

    val recoveredWiFis get() = _recoveredWiFis.asStateFlow()
    val isPasswordReadingError get() = _isPasswordReadingError.asStateFlow()
    val isWifiNotFound get() = _isWifiNotFound.asStateFlow()
    val isProcess get() = _isProcess.asStateFlow()

    fun filter(pattern: String?) {
        val filteredWiFis =
            if (pattern.isNullOrEmpty()) _allRecoveredWiFis
            else _allRecoveredWiFis.filter { x -> x.name.contains(pattern, true) }

        _recoveredWiFis.value = filteredWiFis
        updateErrorFlags()
    }

    private suspend fun initRecoveredWiFis() = coroutineScope {
        try {
            _isProcess.value = true

            _allRecoveredWiFis = _recoveredWifiModel.getRecoveredWiFis()

            _recoveredWiFis.value = _allRecoveredWiFis
        } catch (ex: Exception) {
            throw ViewMessageBusinessException("Failed to download recovery wifi")
        } finally {
            _isProcess.value = false
            updateErrorFlags()
        }
    }

    private fun updateErrorFlags() {
        _isWifiNotFound.value = _recoveredWiFis.value.isEmpty() && !_isProcess.value
        _isPasswordReadingError.value = _allRecoveredWiFis.isEmpty() && !_isProcess.value
    }
}