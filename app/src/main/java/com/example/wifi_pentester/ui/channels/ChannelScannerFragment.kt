package com.example.wifi_pentester.ui.channels

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.ViewCompositionStrategy
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import com.example.wfc_models.channels.dtos.WifiChannel
import com.example.wifi_pentester.R
import com.example.wifi_pentester.databinding.ChannelScannerFragmentBinding
import com.example.wifi_pentester.databinding.ChannelsListItemBinding
import com.example.wifi_pentester.ui.lock_screens.actions.LockScreenForEnableRequiredFeaturesForWifiScan
import com.example.wifi_pentester.ui.theme.AppTheme
import com.example.wifi_pentester.view_models.channels.ChannelScanViewModel
import dagger.hilt.android.AndroidEntryPoint
import javax.inject.Inject

@AndroidEntryPoint
class ChannelScannerFragment @Inject constructor() : Fragment() {
    private val _channelScanViewModel: ChannelScanViewModel by viewModels()

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        val binding = DataBindingUtil.inflate<ChannelScannerFragmentBinding>(inflater, R.layout.channel_scanner_fragment, container, false)

        binding.viewModel = _channelScanViewModel
        binding.lifecycleOwner = viewLifecycleOwner

        binding.chanelScannerComposeView.apply {
            setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
            setContent {
                AppTheme {
                    LockScreenForEnableRequiredFeaturesForWifiScan {
                        ChannelScanner(_channelScanViewModel)
                    }
                }
            }
        }

        return binding.root
    }

    override fun onPause() {
        super.onPause()
        _channelScanViewModel.stopScan()
    }

    override fun onResume() {
        super.onResume()
        _channelScanViewModel.startScan()
    }
}
@OptIn(ExperimentalFoundationApi::class)
@Composable
fun ChannelScanner(channelScanViewModel: ChannelScanViewModel) {
    val channels  by channelScanViewModel.channels.collectAsState(null)

    if(channels != null) {
        LazyColumn {
            items(
                items = channels!!,
                key = { it }
            ) {
                ChannelListItem(
                    channel = it,
                    modifier = Modifier.animateItemPlacement(),
                )
            }
        }
    }
}

@Composable
private fun ChannelListItem(
    channel: WifiChannel,
    modifier: Modifier
) {
    AndroidView(
        factory = { context ->
            val inflater = LayoutInflater.from(context)
            val binding = ChannelsListItemBinding.inflate(inflater)
            binding.channel = channel

            return@AndroidView binding.root
        },
        modifier = modifier
            .padding(start = 8.dp, top = 4.dp, end = 8.dp, bottom = 4.dp)
            .fillMaxWidth()
    )
}
