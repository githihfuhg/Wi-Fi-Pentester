package com.example.wifi_pentester.ui.wifi

import android.Manifest
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.core.app.ActivityCompat
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.recyclerview.widget.SimpleItemAnimator
import com.example.wfc_models.wifi.scanners.data_models.Wifi
import com.example.wfc_models.wifi.scanners.data_models.WifiScannerState
import com.example.wifi_pentester.R
import com.example.wifi_pentester.databinding.FragmentWifiBinding
import com.example.wifi_pentester.ui.wifi.adapters.WifiListAdapter
import com.example.wifi_pentester.ui.wifi.dialogs.CopyWifiInfoDialog
import com.example.wifi_pentester.ui.wifi.dialogs.SelectingTheConnectionTypeDialog
import com.example.wifi_pentester.ui.wifi.dialogs.WifiScannerSettingsDialog
import com.example.wifi_pentester.utils.factories.DialogWithDataFactory
import com.example.wifi_pentester.view_models.wifis.WifiListViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.job
import kotlinx.coroutines.launch
import javax.inject.Inject

@AndroidEntryPoint
class WifiFragment @Inject constructor() : Fragment() {
    private val wifiListViewModel: WifiListViewModel by viewModels()

    @Inject
    lateinit var wiFiListAdapter: WifiListAdapter
    @Inject
    lateinit var dialogFactory: DialogWithDataFactory
    @Inject
    lateinit var wifiSettingsDialog:WifiScannerSettingsDialog

    override fun onResume() {
        super.onResume()
        wifiListViewModel.startScan()
    }

    override fun onPause() {
        super.onPause()
        wifiListViewModel.stopScan()
    }

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        val binding = DataBindingUtil.inflate<FragmentWifiBinding>(inflater, R.layout.fragment_wifi, container, false)
        binding.viewModel = wifiListViewModel
        binding.lifecycleOwner = viewLifecycleOwner

        initWifiRecyclerView(binding)
        initPermissionsGainedTextView(binding)
        initWifiFragmentOptionButton(binding)

        return binding.root
    }

    private fun initWifiRecyclerView(binding: FragmentWifiBinding) {
        binding.wifiRecyclerView.setHasFixedSize(true)

        wiFiListAdapter.setRecyclerViewItemClickListener { wifi: Wifi, isLong: Boolean ->
            val dialog =
                if (isLong) dialogFactory.create<CopyWifiInfoDialog, Wifi>(wifi)
                else dialogFactory.create<SelectingTheConnectionTypeDialog, Wifi>(wifi)

            val fragmentManager = requireActivity().supportFragmentManager

            viewLifecycleOwner.lifecycleScope.launch {
                dialog.showAsync(fragmentManager)
            }
        }

        binding.wifiRecyclerView.adapter = wiFiListAdapter

        val itemAnimator = binding.wifiRecyclerView.itemAnimator as SimpleItemAnimator?
        if (itemAnimator != null) {
            itemAnimator.supportsChangeAnimations = false
        }

        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {
                wifiListViewModel.wifiList.collect { x ->
                    wiFiListAdapter.submitList(x)
                    binding.viewModel = wifiListViewModel
                }
            }
        }
    }

    private fun initPermissionsGainedTextView(binding: FragmentWifiBinding) {
        binding.permissionsGainedText.setOnClickListener {
            val requestCode = 1
            val activity = requireActivity()
            ActivityCompat.requestPermissions(activity, arrayOf(Manifest.permission.ACCESS_FINE_LOCATION), requestCode)
        }
    }

    private fun initWifiFragmentOptionButton(binding: FragmentWifiBinding) {
        binding.wifiFragmentOptionButton.setOnClickListener {
            val scope = viewLifecycleOwner.lifecycleScope

            scope.launch {
                val fragmentManager = requireActivity().supportFragmentManager
                val dialog = wifiSettingsDialog

                val currentWifiScannerState = wifiListViewModel.wifiScannerState
                wifiListViewModel.stopScan()

                scope.launch { dialog.showAsync(fragmentManager) }.join()

                if (currentWifiScannerState == WifiScannerState.ENABLED) {
                    wifiListViewModel.startScan()
                }
            }

        }
    }
}