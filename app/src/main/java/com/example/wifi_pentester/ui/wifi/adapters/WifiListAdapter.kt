package com.example.wifi_pentester.ui.wifi.adapters

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.example.wfc_models.wifi.scanners.data_models.Wifi
import com.example.wifi_pentester.databinding.WifiListItemBinding
import com.example.wifi_pentester.ui.wifi.adapters.WifiListAdapter.WifiHolder
import com.example.wifi_pentester.utils.listeners.RecyclerViewItemClickListener
import javax.inject.Inject

class WifiListAdapter @Inject constructor() : ListAdapter<Wifi, WifiHolder>(DiffCallback()) {
    var clickListener = RecyclerViewItemClickListener { wifi: Wifi, bool: Boolean -> }

    fun setRecyclerViewItemClickListener(clickListener: RecyclerViewItemClickListener<Wifi>) {
        this.clickListener = clickListener
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WifiHolder {
        val layoutInflater = LayoutInflater.from(parent.context)
        val itemBinding = WifiListItemBinding.inflate(layoutInflater, parent, false)
        return WifiHolder(itemBinding)
    }

    override fun onBindViewHolder(holder: WifiHolder, position: Int) {
        val currentWifi = getItem(position)
        holder.bind(currentWifi)
    }

    inner class WifiHolder(var binding: WifiListItemBinding) : RecyclerView.ViewHolder(binding.root) {
        fun bind(recoveredWifi: Wifi) {
            binding.wifi = recoveredWifi
            binding.executePendingBindings()
        }

        init {
            binding.root.setOnClickListener { view: View? -> clickListener.onClick(binding.wifi!!, false) }
            binding.root.setOnLongClickListener { view: View? ->
                clickListener.onClick(binding.wifi!!, true)
                true
            }
        }
    }

    private class DiffCallback : DiffUtil.ItemCallback<Wifi>() {
        override fun areItemsTheSame(oldItem: Wifi, newItem: Wifi): Boolean = oldItem == newItem
        override fun areContentsTheSame(oldItem: Wifi, newItem: Wifi) = oldItem == newItem
    }
}