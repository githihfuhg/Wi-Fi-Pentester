package com.example.wifi_pentester.ui.custom_compose_components

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.os.Parcelable
import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Done
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import com.example.wifi_pentester.R
import kotlinx.parcelize.Parcelize

@Parcelize
data class NameValue(
    val name: String,
    val value: String,
) : Parcelable

@Composable
fun CopyInfoDialog(nameValues: List<NameValue>, onDismissRequest: (() -> Unit)) {
    var selectedItem by rememberSaveable { mutableStateOf<NameValue?>(null) }
    val context = LocalContext.current

    AlertDialog(
        onDismissRequest = onDismissRequest,
        title = {
            Text(stringResource(R.string.choose))
        },
        text = {
            CopyInfoDialogBody(nameValues = nameValues, onSelectItem = { selectedItem = it })
        },
        confirmButton = {
            TextButton(
                onClick = {
                    selectedItem?.run{
                        val clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                        val clip = ClipData.newPlainText("", value)
                        clipboard.setPrimaryClip(clip)
                        Toast.makeText(context, "Copied $value", Toast.LENGTH_SHORT).show()
                    }
                },
                enabled = selectedItem != null
            ) {
                Text(stringResource(R.string.copy))
            }
        }
    )
}

@Composable
private fun CopyInfoDialogBody(nameValues: List<NameValue>, onSelectItem: (NameValue?) -> Unit) {
    var selectedItem by rememberSaveable { mutableStateOf<NameValue?>(null) }

    LazyColumn {
        items(
            items = nameValues,
            key = { it }
        ) {
            CopyInfoDialogItem(
                nameValue = it,
                selected = it == selectedItem,
                onClick = {
                    selectedItem =
                        if (it == selectedItem) {
                            null
                        } else {
                            it
                        }

                    onSelectItem.invoke(selectedItem)
                }
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun CopyInfoDialogItem(nameValue: NameValue, selected: Boolean, onClick: () -> Unit) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceEvenly,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(text = "${nameValue.name} :", Modifier.weight(0.4f))
        ElevatedFilterChip(
            selected = selected,
            onClick = {
                onClick()
            },
            label = {
                Text(
                    nameValue.value,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth()
                )
            },
            modifier = Modifier.weight(0.5f),
            leadingIcon = if (selected) {
                {
                    Icon(
                        imageVector = Icons.Filled.Done,
                        contentDescription = null,
                        modifier = Modifier.size(FilterChipDefaults.IconSize)
                    )
                }
            } else {
                null
            }
        )
    }
}