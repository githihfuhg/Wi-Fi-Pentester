package com.example.wifi_pentester.ui.wifi

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.runtime.*
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.ViewCompositionStrategy
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.viewmodel.compose.viewModel
import com.example.wfc_models.wifi.scanners.dtos.Wifi
import com.example.wfc_models.wifi.scanners.dtos.WifiScannerState
import com.example.wifi_pentester.R
import com.example.wifi_pentester.databinding.WifiListItemBinding
import com.example.wifi_pentester.databinding.WifiScannerFragmentBinding
import com.example.wifi_pentester.ui.lock_screens.actions.LockScreenForEnableRequiredFeaturesForWifiScan
import com.example.wifi_pentester.ui.theme.AppTheme
import com.example.wifi_pentester.ui.wifi.dialogs.*
import com.example.wifi_pentester.view_models.settings.SettingsViewModel
import com.example.wifi_pentester.view_models.wifis.WifiScanViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch
import javax.inject.Inject

@AndroidEntryPoint
class WifiScannerFragment @Inject constructor() : Fragment() {
    private val _wifiScanViewModel by viewModels<WifiScanViewModel>()
  /*  private val systemServicesStateViewModel by viewModels<SystemServicesStateViewModel>()*/

    @Inject
    lateinit var wifiSettingsDialog: WifiScannerSettingsDialog

    override fun onResume() {
        super.onResume()
    /*    systemServicesStateViewModel.synchronizeState()*/
        _wifiScanViewModel.startScan()
    }

    override fun onPause() {
        super.onPause()
        _wifiScanViewModel.stopScan()
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        val binding = DataBindingUtil.inflate<WifiScannerFragmentBinding>(
            inflater,
            R.layout.wifi_scanner_fragment,
            container,
            false
        )
        binding.viewModel = _wifiScanViewModel
        binding.lifecycleOwner = viewLifecycleOwner

        binding.wifiScannerComposeView.apply {
            setViewCompositionStrategy(ViewCompositionStrategy.DisposeOnViewTreeLifecycleDestroyed)
            setContent {
                AppTheme {
                    LockScreenForEnableRequiredFeaturesForWifiScan {
                        WifiScanner(_wifiScanViewModel)
                    }
                }
            }
        }

        initWifiFragmentOptionButton(binding)
        requireActivity()
        return binding.root
    }

    private fun initWifiFragmentOptionButton(binding: WifiScannerFragmentBinding) {
        binding.wifiFragmentOptionButton.setOnClickListener {
            val scope = viewLifecycleOwner.lifecycleScope

            scope.launch {
                val fragmentManager = requireActivity().supportFragmentManager
                val dialog = wifiSettingsDialog

                val currentWifiScannerState = _wifiScanViewModel.wifiScannerState
                _wifiScanViewModel.stopScan()

                scope.launch { dialog.showAsync(fragmentManager) }.join()

                if (currentWifiScannerState == WifiScannerState.ENABLED) {
                    _wifiScanViewModel.startScan()
                }
            }
        }
    }
}

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun WifiScanner(wifiListViewModel: WifiScanViewModel) {
    val settingsViewModel = viewModel<SettingsViewModel>()
    val wifiList by wifiListViewModel.wifiList.collectAsState()
    val appSettings by settingsViewModel.appSettings.collectAsState()
    var actionDialogItem by rememberSaveable { mutableStateOf<Wifi?>(null) }
    var copyInfoDialogItem by rememberSaveable { mutableStateOf<Wifi?>(null) }

    LazyColumn {
        items(
            items = wifiList,
            key = { it.mac }
        ) {
            WifiListItem(
                wifi = it,
                modifier = Modifier.animateItemPlacement(),
                onClick = {
                    actionDialogItem = it
                },
                onLongClick = {
                    copyInfoDialogItem = it
                }
            )
        }
    }

    actionDialogItem?.let {
        if (appSettings != null) {
            WifiActionDialog(
                wifi = it,
                isRootAccessAllowed = appSettings!!.isRootAccessAllowed,
                onDismissRequest = { actionDialogItem = null }
            )
        }
    }
    copyInfoDialogItem?.let {
        CopyWifiInfoDialog(wif = it, onDismissRequest = { copyInfoDialogItem = null })
    }
}

@Composable
private fun WifiListItem(
    wifi: Wifi,
    modifier: Modifier,
    onClick: () -> Unit,
    onLongClick: () -> Unit,
) {
    AndroidView(
        factory = { context ->
            val inflater = LayoutInflater.from(context)
            val binding = WifiListItemBinding.inflate(inflater)
            binding.wifi = wifi

            return@AndroidView binding.root.apply {
                setOnClickListener {
                    onClick()
                }
                setOnLongClickListener {
                    onLongClick()
                    return@setOnLongClickListener true
                }
            }
        },
        modifier = modifier
            .padding(start = 8.dp, top = 4.dp, end = 8.dp, bottom = 4.dp)
            .fillMaxWidth()
    )
}
