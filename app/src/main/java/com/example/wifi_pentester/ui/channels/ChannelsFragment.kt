package com.example.wifi_pentester.ui.channels

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.databinding.DataBindingUtil
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.recyclerview.widget.SimpleItemAnimator
import com.example.wifi_pentester.R
import com.example.wifi_pentester.databinding.FragmentChannelsBinding
import com.example.wifi_pentester.ui.channels.adapters.ChannelListAdapter
import com.example.wifi_pentester.view_models.channels.ChannelsListViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.launch
import javax.inject.Inject

@AndroidEntryPoint
class ChannelsFragment @Inject constructor() : Fragment() {
    private val _channelsListViewModel: ChannelsListViewModel by viewModels()

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
        val binding = DataBindingUtil.inflate<FragmentChannelsBinding>(inflater, R.layout.fragment_channels, container, false)
        val adapter = ChannelListAdapter()

        binding.viewModel = _channelsListViewModel

        binding.channelsListRecyclerView.adapter = adapter
        binding.channelsListRecyclerView.setHasFixedSize(true)
        binding.lifecycleOwner = viewLifecycleOwner

        val itemAnimator = binding.channelsListRecyclerView.itemAnimator as SimpleItemAnimator
        itemAnimator.supportsChangeAnimations = false

        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.STARTED) {
                _channelsListViewModel.channels.collect { wifiChannels ->
                    adapter.submitList(wifiChannels)
                    binding.viewModel = _channelsListViewModel
/*                    binding.channelsListRecyclerView.scheduleLayoutAnimation()*/
                }
            }
        }

        return binding.root
    }

    override fun onPause() {
        super.onPause()
        _channelsListViewModel.stopScan()
    }

    override fun onResume() {
        super.onResume()
        _channelsListViewModel.startScan()
    }
}