package com.example.wifi_pentester.ui.wifi.dialogs

import android.content.Intent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.wfc_models.wifi.scanners.dtos.EncryptionType
import com.example.wfc_models.wifi.scanners.dtos.Wifi
import com.example.wifi_pentester.R
import com.example.wifi_pentester.ui.wifi_pentesting.CrackWifiActivity

@Preview("wifiActionDialogPreview")
@Composable
private fun WifiActionDialogPreview() {
    val mockWifi = Wifi(
        name = "TestWifiName",
        mac = "",
        signalLevel = 1,
        isConnected = true,
        frequency = 24,
        channel = 4,
        hasWps = true,
        encryptionType = EncryptionType.WPA2,
        vendorName = "Test"
    )

    WifiActionDialog(wifi = mockWifi, isRootAccessAllowed = true, onDismissRequest = {})
}

@Composable
fun WifiActionDialog(
    wifi: Wifi,
    isRootAccessAllowed: Boolean,
    onDismissRequest: () -> Unit,
) {
    AlertDialog(
        onDismissRequest = onDismissRequest,
        icon = {
            Icon(
                painter = painterResource(id = R.drawable.ic_wifi),
                contentDescription = null,
                modifier = Modifier.size(32.dp)
            )
        },
        title = {
            Text(wifi.name)
        },
        text = {
            WifiActionDialogBody(wifi, isRootAccessAllowed)
        },
        confirmButton = {}
    )
}

@Composable
private fun WifiActionDialogBody(wifi: Wifi, isRootAccessAllowed: Boolean) {
    val context = LocalContext.current

    Column {
        WifiActionButton(
            text = stringResource(R.string.connect_us_a_pass),
            modifier = Modifier.fillMaxWidth(),
            onClick = {

            }
        )
        if (isRootAccessAllowed) {
            WifiActionButton(
                text = stringResource(R.string.connect_us_a_wps_pin),
                modifier = Modifier.fillMaxWidth(),
                onClick = {


                }
            )
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly,
                verticalAlignment = Alignment.CenterVertically
            ) {
                WifiActionButton(
                    text = stringResource(R.string.connect_us_brute_wps_attack),
                    modifier = Modifier.weight(1f),
                    onClick = {

                    }
                )
                Spacer(Modifier.weight(0.05f))
                WifiActionButton(
                    text = stringResource(R.string.connect_us_pixie_dust_attack),
                    modifier = Modifier.weight(1f),
                    onClick = {
                        val intent = Intent(context, CrackWifiActivity::class.java)
                        intent.putExtra(Wifi::class.java.simpleName, wifi)
                        context.startActivity(intent)
                    }
                )
            }
        }
    }
}

@Composable
private fun WifiActionButton(text: String, onClick: () -> Unit, modifier: Modifier) {
    OutlinedButton(
        modifier = modifier,
        onClick = onClick,
    ) {
        Text(text = text)
    }
}
