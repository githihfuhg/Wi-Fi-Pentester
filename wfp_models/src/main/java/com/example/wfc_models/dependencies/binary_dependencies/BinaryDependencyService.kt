package com.example.wfc_models.dependencies.binary_dependencies

import android.content.Context
import com.example.wfc_models.dependencies.binary_dependencies.data_models.BinaryDependency
import com.example.wfc_models.dependencies.binary_dependencies.data_models.BinaryDependencyType
import com.example.wfc_models.exceptions.BusinessException
import com.example.wfc_models.settings.data_models.AppSettings
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Deferred
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.async
import java.io.File
import java.io.FileOutputStream
import javax.inject.Inject

class BinaryDependencyService @Inject constructor(
    @ApplicationContext private val _context: Context
) : IBinaryDependencyService {
    override fun installBinaryDependenciesAsync(systemType: AppSettings.SystemType): Deferred<List<BinaryDependency>> =
        CoroutineScope(Dispatchers.IO).async {
            val dependencies = getDependencies(systemType)

            for (binaryDependency in dependencies) {
                val fileDependency = File(binaryDependency.localPath);

                FileOutputStream(fileDependency).use { out ->
                    _context.assets.open(binaryDependency.assetsPath).use {
                        it.copyTo(out)
                    }
                }
                fileDependency.setExecutable(true)
            }

            return@async dependencies
        }

    private fun getDependencies(systemType: AppSettings.SystemType): List<BinaryDependency> {
        val x32DependencyAssetsFolderPath = "binary_dependencies/x32"
        val x64DependencyAssetsFolderPath = "binary_dependencies/x64"

        val assetsFolderPath = if(systemType == AppSettings.SystemType.X32) x32DependencyAssetsFolderPath else x64DependencyAssetsFolderPath

        val dependencyPaths = (_context.assets.list(assetsFolderPath))!!.toList();

        val dependencies = dependencyPaths.map { x ->
            val assetsPath = "${assetsFolderPath}/$x"
            val localPath = "${_context.filesDir}/$x"
            val type = getBinaryDependencyTypeByName(x)

            return@map BinaryDependency(x, assetsPath, localPath, type)
        }.toList()

        return dependencies
    }

    private fun getBinaryDependencyTypeByName(name: String): BinaryDependencyType = when (name) {
        "iw" -> BinaryDependencyType.IW
        "message_sender" -> BinaryDependencyType.MESSAGE_SENDER
        "pixie_wps" -> BinaryDependencyType.PIXIE_WPS
        "wpa_supplicant" -> BinaryDependencyType.WPA_SUPPLICANT
        else -> throw BusinessException("can not mapped binary dependency name to type")
    }
}