package com.example.wfc_models.wifi.scanners

import android.annotation.SuppressLint
import android.net.wifi.WifiManager
import com.example.wfc_data.database.WFCDatabase
import com.example.wfc_data.database.entities.ProviderEntity
import com.example.wfc_models.wifi.converters.WifiConverter
import com.example.wfc_models.wifi.scanners.data_models.EncryptionType
import com.example.wfc_models.wifi.scanners.data_models.Wifi
import kotlinx.coroutines.coroutineScope
import javax.inject.Inject

class WifiScanner @Inject constructor(
    private val _wifiManager: WifiManager,
    private val _dataBase: WFCDatabase
) : IWifiScanner {

    @SuppressLint("MissingPermission")
    override suspend fun scanAsync() = coroutineScope {
        _wifiManager.startScan()

        val scanResults = _wifiManager.scanResults
        val connectionInfo = _wifiManager.connectionInfo
        val resultWifis = mutableListOf<Wifi>()

        for (scanResult in scanResults) {
            val isWps = scanResult.capabilities.contains("WPS")
            val encryptionType = parseEncryptionType(scanResult.capabilities)
            val wifiProvider = getWifiProviderAsync(scanResult.BSSID)
            val wifiChannel = _dataBase.channelDao().getByFrequency(scanResult.frequency)

            val wifi = Wifi(
                name = scanResult.SSID,
                mac = scanResult.BSSID,
                signalLevel = scanResult.level,
                isConnected = scanResult.BSSID == connectionInfo.bssid,
                frequency = scanResult.frequency,
                frequencyType = WifiConverter.convertFrequencyToFrequencyType(scanResult.frequency),
                channel = wifiChannel?.value ?: 0,
                haveWps = isWps,
                encryptionType = encryptionType,
                providerName = wifiProvider?.name ?: "Unknown"
            )
            resultWifis.add(wifi)
        }
        return@coroutineScope resultWifis
    }

    private suspend fun getWifiProviderAsync(bssid: String): ProviderEntity? = coroutineScope {
        val regex = Regex("^([a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2})")

        val mathResult = regex.find(bssid)

        val macPattern = mathResult?.groups?.get(1)?.value

        val wifiProvider =
            if (macPattern == null) null
            else _dataBase.providerDao().getById(macPattern)

        return@coroutineScope wifiProvider
    }

    private fun parseEncryptionType(capabilities: String): EncryptionType = with (capabilities) {
        when {
            contains(EncryptionType.WEP.value) -> EncryptionType.WEP
            contains(EncryptionType.WPA2.value) -> EncryptionType.WPA2
            contains(EncryptionType.WPA3.value) -> EncryptionType.WPA3
            contains(EncryptionType.WPA.value) -> EncryptionType.WPA
            else -> EncryptionType.OPEN
        }
    }
}