package com.example.wfc_models.wifi.scanners

import com.example.wfc_models.exceptions.BusinessException
import com.example.wfc_models.settings.ISettingsService
import com.example.wfc_models.settings.data_models.WifiFilter
import com.example.wfc_models.settings.data_models.WifiScannerSettings
import com.example.wfc_models.settings.data_models.WifiSortMode
import com.example.wfc_models.wifi.scanners.data_models.Wifi
import com.example.wfc_models.wifi.scanners.data_models.WifiScannerState
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.MutableSharedFlow
import kotlinx.coroutines.flow.SharedFlow
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class WifiScanService @Inject constructor(
    private val _wifiScanner: IWifiScanner,
    private val _rootWifiScanner: IRootWifiScanner,
    private val _settingsModel: ISettingsService,
) : IWifiScanService {
    private val _mutableWifiList = MutableSharedFlow<List<Wifi>>()
    private var _wifiScanningJob: Job? = null

    override val wifiList: SharedFlow<List<Wifi>> = _mutableWifiList
    override val scannerState: WifiScannerState
        get() {
            return if (_wifiScanningJob == null) WifiScannerState.DISABLED
            else WifiScannerState.ENABLED
        }

    override suspend fun startScan(wifiScannerCustomSettings: WifiScannerSettings?) = coroutineScope {
        if (scannerState == WifiScannerState.ENABLED) return@coroutineScope

        val wifiScannerSettings =
            wifiScannerCustomSettings
                ?: _settingsModel.getSettings(WifiScannerSettings::class.java)
                ?: throw BusinessException("Wifi scanner settings not found")

        val currentWifiScanner =
            if (wifiScannerSettings.isRootMode) _rootWifiScanner
            else _wifiScanner

        val delayInMilliseconds = (wifiScannerSettings.timeoutInSeconds * 1000).toLong()

        _wifiScanningJob = launch {
            while (coroutineContext.isActive) {
                var resultWifiList = currentWifiScanner.scanAsync()
                    resultWifiList = filterWifiList(resultWifiList, wifiScannerSettings.filters)
                    resultWifiList = sortWifiList(resultWifiList, wifiScannerSettings.sortMode)

                _mutableWifiList.emit(resultWifiList)

                delay(delayInMilliseconds)
            }
        }
    }

    override suspend fun stopScan() = coroutineScope {
        if (scannerState == WifiScannerState.DISABLED) return@coroutineScope

        _wifiScanningJob?.cancelAndJoin()
        _wifiScanningJob = null
    }

    private fun filterWifiList(wifiList: List<Wifi>, filters: List<WifiFilter>): List<Wifi> {
        val result = wifiList.filter { wifi ->
            val isSuitableValue = filters.all { x ->
                val getFieldValueFunc = _functionsForGetWifiPropertyValueByName[x.fieldName] ?: return@all false
                val fieldValue = getFieldValueFunc(wifi)
                return@all fieldValue.toString() == x.fieldValue
            }
            return@filter isSuitableValue
        }

        return result
    }

    private val _functionsForGetWifiPropertyValueByName = hashMapOf<String, (wifi: Wifi) -> Any>(
        Wifi::name.name to { wifi -> wifi.name },
        Wifi::mac.name to { wifi -> wifi.mac },
        Wifi::signalLevel.name to { wifi -> wifi.signalLevel },
        Wifi::isConnected.name to { wifi -> wifi.isConnected },
        Wifi::frequencyType.name to { wifi -> wifi.frequencyType },
        Wifi::channel.name to { wifi -> wifi.channel },
        Wifi::haveWps.name to { wifi -> wifi.haveWps },
        Wifi::encryptionType.name to { wifi -> wifi.encryptionType },
        Wifi::providerName.name to { wifi -> wifi.providerName },
    )

    private fun sortWifiList(wifiList: List<Wifi>, sortMode: WifiSortMode): List<Wifi> {
        return when (sortMode) {
            WifiSortMode.SIGNAL_LEVEL -> wifiList.sortedBy { x -> x.signalLevel }
            WifiSortMode.CHANNEL -> wifiList.sortedBy { x -> x.channel }
            WifiSortMode.NAME -> wifiList.sortedBy { x -> x.name }
            WifiSortMode.PROVIDER_NAME -> wifiList.sortedBy { x -> x.providerName }
        }
    }
}