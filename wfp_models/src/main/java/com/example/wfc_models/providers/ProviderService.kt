package com.example.wfc_models.providers
import com.example.wfc_data.database.providers.ProviderEntity
import com.example.wfc_data.database.providers.repositories.IProvidersRepository
import com.example.wfc_models.dependencies.text_dependencies.ITextDependencyService
import com.example.wfc_models.dependencies.text_dependencies.dtos.TextDependencyType
import com.example.wfc_models.exceptions.CriticalBusinessException
import com.example.wfc_models.exceptions.ViewMessageBusinessException
import com.example.wfc_models.providers.dtos.WifiProviderFromMacLookupApp
import com.google.gson.GsonBuilder
import kotlinx.coroutines.*
import java.net.URL
import javax.inject.Inject

class ProviderService @Inject constructor(
    private val _providersRepository: IProvidersRepository,
    private val _textDependencyModel: ITextDependencyService
) : IProviderService {
    private val _gsonBuilder = GsonBuilder()

    override suspend fun updateProviders(): Unit = coroutineScope {
        try {
            val newProviders = getProviderFromMacLookupApp()
            _providersRepository.removeAllAsync()
            _providersRepository.addAsync(*newProviders)
        } catch (ex: Exception){
            if(ex is ViewMessageBusinessException) throw ex
            throw ViewMessageBusinessException("The Wi-Fi provider database could not be updated.")
        }
    }

    override suspend fun initialize() = coroutineScope {
        val isExistProviders = _providersRepository.anyAsync()

        if(isExistProviders) return@coroutineScope

        val gson = _gsonBuilder.create()
        val providersInJson = _textDependencyModel.readTextDependency(TextDependencyType.PROVIDERS)

        val providerListType = Array<ProviderEntity>::class.java

        val providers = gson.fromJson(providersInJson, providerListType)
            ?: throw CriticalBusinessException("Providers in ${TextDependencyType.PROVIDERS.value} not found")

        _providersRepository.addAsync(*providers)
    }

    private suspend fun getProviderFromMacLookupApp(): Array<ProviderEntity> = coroutineScope {
        val apiUrl = URL("https://maclookup.app/downloads/json-database/get-db") // ToDo: поискать другого поставщика
        val readDataBaseJob = async(Dispatchers.IO) {
            apiUrl.readText()
        }
        val providersFromMacLookupAppInJson = readDataBaseJob.await()
        val gson = _gsonBuilder.create()
        val providerFromMacLookupAppListType = Array<WifiProviderFromMacLookupApp>::class.java

        val macLookupAppProviders =
            gson.fromJson(providersFromMacLookupAppInJson, providerFromMacLookupAppListType)
                ?: throw ViewMessageBusinessException("he Wi-Fi provider database could not be updated")

        val result = macLookupAppProviders
            .map { x -> ProviderEntity(x.vendorName, x.macPrefix) }
            .toTypedArray()

        return@coroutineScope result
    }
}