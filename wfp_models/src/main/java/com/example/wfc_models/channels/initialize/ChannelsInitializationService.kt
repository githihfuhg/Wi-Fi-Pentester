package com.example.wfc_models.channels.initialize

import com.example.wfc_data.database.channles.ChannelEntity
import com.example.wfc_data.database.channles.repositories.IChannelsRepository
import com.example.wfc_models.dependencies.text_dependencies.ITextDependencyService
import com.example.wfc_models.dependencies.text_dependencies.dtos.TextDependencyType
import com.example.wfc_models.exceptions.CriticalBusinessException
import com.google.gson.GsonBuilder
import kotlinx.coroutines.coroutineScope
import javax.inject.Inject

class ChannelsInitializationService @Inject constructor(
    private val _channelsRepository: IChannelsRepository,
    private val _textDependencyModel: ITextDependencyService
) : IChannelsInitializeService {
    private val _gsonBuilder = GsonBuilder()

    override suspend fun initialize() = coroutineScope {
        val isExistChannels = _channelsRepository.anyAsync()

        if (isExistChannels) return@coroutineScope

        val gson = _gsonBuilder.create()
        val channelsJson = _textDependencyModel.readTextDependency(TextDependencyType.CHANNELS)

        val channelListType = Array<ChannelEntity>::class.java

        val channels = gson.fromJson(channelsJson, channelListType)
            ?: throw CriticalBusinessException("Channels not found in the channels.json ")

        _channelsRepository.addAsync(*channels)
    }
}