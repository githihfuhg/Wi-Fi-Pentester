package com.example.wfc_models.broadcast

import com.example.wfc_models.broadcast.dtos.BroadcastEvent
import kotlinx.coroutines.flow.*
import javax.inject.Inject

class BroadcastService @Inject constructor() : IBroadcastService {
    private val _events = MutableSharedFlow<BroadcastEvent>()

    override suspend fun broadcast(key: String) {
        _events.emit(BroadcastEvent(null, key))
    }

    override suspend fun broadcast(data: Any, key: String) {
        _events.emit(BroadcastEvent(data, key))
    }

    override suspend fun broadcast(data: Any) {
        return broadcast(data, data::class.java.name)
    }

    override suspend fun <T> on(key: String): Flow<T> {
       return _events
            .filter { x -> x.key == key }
            .map { x -> x.data as T }
    }

    override suspend fun <T> on(classType: Class<T>): Flow<T> {
        return on(classType.name)
    }
}