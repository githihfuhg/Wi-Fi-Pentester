package com.example.wfc_models.settings

import com.example.wfc_data.database.settings.SettingEntity
import com.example.wfc_data.database.settings.SettingsType
import com.example.wfc_data.database.settings.repositories.ISettingsRepository
import com.example.wfc_models.exceptions.BusinessException
import com.example.wfc_models.settings.dtos.AppSetting
import com.example.wfc_models.settings.dtos.ISetting
import com.example.wfc_models.settings.dtos.WifiConnectorSetting
import com.example.wfc_models.settings.dtos.WifiScannerSetting
import com.google.gson.GsonBuilder
import kotlinx.coroutines.coroutineScope
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import javax.inject.Inject

class SettingsService @Inject constructor(
    private val _settingsRepository: ISettingsRepository
) : ISettingsService {
    private val _gsonBuilder = GsonBuilder()
    private val _settingsTypeHasMap = hashMapOf<Class<*>, SettingsType>(
        AppSetting::class.java to SettingsType.APP_SETTINGS,
        WifiConnectorSetting::class.java to SettingsType.ROOT_WPS_CONNECTOR_SETTINGS,
        WifiScannerSetting::class.java to SettingsType.WIFI_SCANNER_SETTINGS,
    )

    override fun <T : ISetting> getSettingFlow(classType: Class<T>): Flow<T> {
        val settingsType = _settingsTypeHasMap[classType]!!

        val result = _settingsRepository.getSettingFlow(settingsType)
            .map { x -> deserializeSettingFromJson(x.value, classType) }

        return result
    }

    override suspend fun <T : ISetting> getSetting(classType: Class<T>): T? = coroutineScope {
        val settingsType = _settingsTypeHasMap[classType]!!


        val settingsEntity = _settingsRepository.getSettingAsync(settingsType)
            ?: return@coroutineScope null

        val result = deserializeSettingFromJson(settingsEntity.value, classType)

        return@coroutineScope result
    }

    override suspend fun <T : ISetting> createSettings(settings: T): Unit = coroutineScope {
        val classType = settings::class.java
        val gson = _gsonBuilder.create()

        try {
            val jsonSettings = gson.toJson(settings)
            val settingsType = _settingsTypeHasMap[classType]!!
            val settingEntity = SettingEntity(settingsType, jsonSettings)

            _settingsRepository.createAsync(settingEntity)
        } catch (ex: Exception) {
            ex.printStackTrace()
            throw BusinessException("Failed to create${classType.name}\n ${ex.message}")
        }
    }

    override suspend fun <T : ISetting> updateSettings(settings: T): Unit = coroutineScope {
        val gson = _gsonBuilder.create()
        val classType = settings::class.java
        try {
            val jsonSettings = gson.toJson(settings)
            val settingsType = _settingsTypeHasMap[settings::class.java]!!
            val settingsEntity = _settingsRepository.getSettingAsync(settingsType)!!
            settingsEntity.value = jsonSettings

            _settingsRepository.updateAsync(settingsEntity)
        } catch (ex: Exception) {
            ex.printStackTrace()
            throw BusinessException("Failed to update${classType.name}\n ${ex.message}")
        }
    }

    private fun <T : ISetting> deserializeSettingFromJson(json: String, classType: Class<T>): T {
        try {
            val gson = _gsonBuilder.create()
            val result = gson.fromJson(json, classType)

            return result
        } catch (ex: Exception) {
            ex.printStackTrace()
            throw BusinessException("Failed convert json to object ${classType.name}\n ${ex.message}")
        }
    }
}