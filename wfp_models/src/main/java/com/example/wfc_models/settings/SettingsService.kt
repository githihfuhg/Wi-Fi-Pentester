package com.example.wfc_models.settings

import com.example.wfc_data.database.entities.SettingsEntity
import com.example.wfc_data.database.WFCDatabase
import com.example.wfc_data.database.entities.enums.SettingsType
import com.example.wfc_models.broadcast.IBroadcastService
import com.example.wfc_models.exceptions.BusinessException
import com.example.wfc_models.settings.data_models.*
import com.google.gson.GsonBuilder
import kotlinx.coroutines.*
import java.lang.Exception
import javax.inject.Inject

class SettingsService @Inject constructor(
    _dataBase: WFCDatabase,
    private val _broadcastModel: IBroadcastService
) : ISettingsService {
    private val _settingsDao = _dataBase.settingsDao()
    private val _gsonBuilder = GsonBuilder()

    private val _settingsTypeHasMap = hashMapOf<Class<*>, SettingsType>(
        AppSettings::class.java to SettingsType.APP_SETTINGS,
        WifiConnectorSettings::class.java to SettingsType.ROOT_WPS_CONNECTOR_SETTINGS,
        WifiScannerSettings::class.java to SettingsType.WIFI_SCANNER_SETTINGS,
    )

    override suspend fun <T : ISettings> getSettings(classType: Class<T>): T? = coroutineScope {
        val gson = _gsonBuilder.create()
        val settingsType = _settingsTypeHasMap[classType]!!
        val settingsEntity = _settingsDao.getSettingsByType(settingsType) ?: return@coroutineScope null

        try {
            val result = gson.fromJson(settingsEntity.value, classType)

            return@coroutineScope result
        }
        catch (ex: Exception){
            ex.printStackTrace()
            throw BusinessException("Failed convert json to object ${classType.name}\n ${ex.message}")
        }
    }

    override suspend fun <T : ISettings> createSettings(settings: T): Unit = coroutineScope {
        val classType = settings::class.java
        val gson = _gsonBuilder.create()

        try {
            val jsonSettings = gson.toJson(settings)
            val settingsType = _settingsTypeHasMap[classType]!!
            val settingsEntity = SettingsEntity(settingsType, jsonSettings)
            _settingsDao.insert(settingsEntity)
        } catch (ex: Exception){
            ex.printStackTrace()
            throw BusinessException("Failed to create${classType.name}\n ${ex.message}")
        }
    }

    override suspend fun <T : ISettings> updateSettings(settings: T): Unit = coroutineScope {
        val gson = _gsonBuilder.create()
        val classType = settings::class.java
        try {
            val jsonSettings = gson.toJson(settings)
            val settingsType = _settingsTypeHasMap[settings::class.java]!!
            val settingsEntity = _settingsDao.getSettingsByType(settingsType)
                ?: throw BusinessException("Settings not found")
            settingsEntity.value = jsonSettings
            _settingsDao.update(settingsEntity)

            _broadcastModel.broadcast(settings)
        } catch (ex: Exception){
            ex.printStackTrace()
            throw BusinessException("Failed to update${classType.name}\n ${ex.message}")
        }
    }
}