package com.example.wfc_models.settings

import android.content.Context
import com.example.wfc_models.dependencies.binary_dependencies.IBinaryDependencyService
import com.example.wfc_models.settings.dtos.*
import com.example.wfc_models.shell.IShellService
import com.example.wfc_models.shell.ISpecificShellCommandService
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.*
import javax.inject.Inject

class InitSettingsService @Inject constructor(
    private val _shellModel: IShellService,
    private val _settingsModel: ISettingsService,
    private val _binaryDependencyModel: IBinaryDependencyService,
    private val _specificShellCommandModel: ISpecificShellCommandService,
    @ApplicationContext private val _context: Context
) : IInitSettingsService {
    override suspend fun initDefaultAppSettings(updateIfExist: Boolean): AppSetting =
        coroutineScope {
            val appSettingsDto = _settingsModel.getSetting(AppSetting::class.java)

            if (appSettingsDto != null && !updateIfExist)
                return@coroutineScope appSettingsDto

            val systemType = _specificShellCommandModel.checkSystemTypeAsync().await()
            val isRootAccessAllowed = _shellModel.isRootAccessAllowedAsync().await()
            val dependencies =
                _binaryDependencyModel.installBinaryDependenciesAsync(systemType).await()
            val dependencyMap = dependencies.associateBy({ it.type }, { it }).toMap()

            val appSettings = AppSetting(
                isRootAccessAllowed,
                systemType,
                dependencyMap,
                _context.cacheDir.path,
                _context.filesDir.path
            )

            if (appSettingsDto == null) {
                _settingsModel.createSettings(appSettings)
            } else {
                _settingsModel.updateSettings(appSettings)
            }

            return@coroutineScope appSettings
        }

    override suspend fun initDefaultWifiScannerSettings(updateIfExist: Boolean): WifiScannerSetting =
        coroutineScope {
            val wifiScannerSettingsDto =
                _settingsModel.getSetting(WifiScannerSetting::class.java)

            if (wifiScannerSettingsDto != null && !updateIfExist)
                return@coroutineScope wifiScannerSettingsDto

            val newWifiScannerSettingsDto = WifiScannerSetting(
                sortMode = WifiSortMode.SIGNAL_LEVEL,
                filters = listOf(),
                timeoutInSeconds = 3,
                isRootMode = false
            )

            if (wifiScannerSettingsDto == null) {
                _settingsModel.createSettings(newWifiScannerSettingsDto)
            } else {
                _settingsModel.updateSettings(newWifiScannerSettingsDto)
            }

            return@coroutineScope newWifiScannerSettingsDto
        }

    override suspend fun initDefaultRootWpsConnectorSettings(
        appSettings: AppSetting,
        updateIfExist: Boolean
    ): WifiConnectorSetting? = coroutineScope {
        if (!appSettings.isRootAccessAllowed) return@coroutineScope null
        val wifiInterfaceName = "wlan0"

        val rootWpsConnectorSettingsDto =
            _settingsModel.getSetting(WifiConnectorSetting::class.java)

        if (rootWpsConnectorSettingsDto != null && !updateIfExist)
            return@coroutineScope rootWpsConnectorSettingsDto

        val isDisableWiFiBeforeConnection = _specificShellCommandModel
            .isDisableWiFiBeforeConnectionAsync(wifiInterfaceName, appSettings).await()
            ?: return@coroutineScope null

        val newRootWpsConnectorSettingsDto = WifiConnectorSetting(
            interfaceName = wifiInterfaceName,
            isDisableWiFiBeforeConnection = isDisableWiFiBeforeConnection,
            maxConnectionTimeout = 40,
            isRootMode = false
        )

        if (rootWpsConnectorSettingsDto == null) {
            _settingsModel.createSettings(newRootWpsConnectorSettingsDto)
        } else {
            _settingsModel.updateSettings(newRootWpsConnectorSettingsDto)
        }

        return@coroutineScope newRootWpsConnectorSettingsDto
    }

    override suspend fun initialize(): Unit = coroutineScope {
        val appSettings = initDefaultAppSettings()
        initDefaultWifiScannerSettings()
        initDefaultRootWpsConnectorSettings(appSettings)
    }
}