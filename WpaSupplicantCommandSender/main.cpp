#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>
#include <string>
#include <vector>

using namespace std;

enum ResultCode
{
    Error = -1,
    Successfully = 0
};

bool try_get_argument_value_by_prefix(vector<string> arguments, string prefix, string& argumentValue)
{
    int argumentsSize = arguments.size();

    for (int i = 0; i < argumentsSize; i++)
    {
        auto argument = arguments[i];
        auto nextIndex = i + 1;

        if (argument == prefix && nextIndex <= argumentsSize - 1)
        {
            argumentValue = arguments[nextIndex];
            return true;
        }
    }

    return false;
}

bool try_send_message(string socketPath, string message)
{
    auto socketPrt = socket(AF_UNIX, SOCK_DGRAM, 0);

    if (socketPrt == -1)
    {
        printf("Error with creating socket\n");
        return false;
    }

    struct sockaddr_un socketAdress = {};
    socketAdress.sun_family = AF_UNIX;
    strcpy(socketAdress.sun_path, socketPath.c_str());

    auto result = sendto(socketPrt, message.c_str(), message.length(), 0, (struct sockaddr*)&socketAdress, sizeof(socketAdress));

    if (result == -1)
    {
        printf("Error with sending messge to socket\n");
        return false;
    }

    return true;
}

void printResutCode(ResultCode resultCode)
{
    printf("%d\n", resultCode);
}

int main(int argc, char* argv[])
{
    vector<string> arguments(argv + 1, argv + argc);
    string socketPath;
    string message;

    auto isSocketPathHasValue = try_get_argument_value_by_prefix(arguments, "-p", socketPath);
    auto isMessageHasValue = try_get_argument_value_by_prefix(arguments, "-m", message);

    if (!isSocketPathHasValue || !isSocketPathHasValue)
    {
        string programmPath(argv[0]);
        printf("Error, incorrect parameters, check the correctness of the input. Example: %s -p pathToSocket -m message\n", programmPath);
        printResutCode(ResultCode::Error);
        return 0;
    }

    auto isSucces = try_send_message(socketPath, message);

    auto resultCode = isSucces
        ? ResultCode::Successfully
        : ResultCode::Error;

    printResutCode(resultCode);
    return 0;
}
